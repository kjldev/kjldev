---
import { getCollection, render, type CollectionEntry } from 'astro:content';
import ProjectLayout from '../../layouts/ProjectLayout.astro';
import Prose from '../../components/Prose.astro';
import type { MarkdownHeading } from 'astro';

// Import the Astro component for rendering remote markdown
import RemoteReadme from '../../components/RemoteReadme.astro';

interface Props {
	project: CollectionEntry<'projects'>;
	headings: MarkdownHeading[];
}

export async function getStaticPaths() {
	const projects = await getCollection('projects');

	const headings = await Promise.all(
		projects.map(async (project) => {
			const data = await render(project);
			return data.headings;
		})
	);

	return projects.map((project, index) => ({
		params: { slug: project.id },
		props: { project: project, headings: headings[index] },
	}));
}

const { project, headings } = Astro.props;
const { Content, remarkPluginFrontmatter } = await render(project);
const { minutesRead } = remarkPluginFrontmatter as {
	minutesRead: number;
};

// Returns an array of valid raw README URLs (main, then master) that actually exist
async function getValidReadmeRawUrls(
	project: CollectionEntry<'projects'>
): Promise<string[]> {
	if (
		project.data.hasContent === false &&
		project.data.links &&
		Array.isArray(project.data.links)
	) {
		const github = project.data.links.find(
			(l) => l.url && l.url.includes('github.com')
		);
		if (github) {
			const match = github.url.match(/github\.com\/([^/]+)\/([^/]+)/);
			if (match) {
				const [, owner, repo] = match;
				const urls = [
					`https://raw.githubusercontent.com/${owner}/${repo}/main/README.md`,
					`https://raw.githubusercontent.com/${owner}/${repo}/master/README.md`,
				];
				// Test each URL and only return those that exist (status 200)
				const checks = await Promise.all(
					urls.map(async (u) => {
						try {
							const res = await fetch(u, { method: 'HEAD' });
							return res.ok ? u : null;
						} catch {
							return null;
						}
					})
				);

				return (checks.filter(Boolean) as string[]) ?? [];
			}
		}
	}
	return [];
}

const remoteReadmeUrls: string[] =
	project.data.remoteReadme ?
		[project.data.remoteReadme]
	:	await getValidReadmeRawUrls(project);
---

<ProjectLayout
	frontmatter={project.data}
	headings={headings}
	filePath={project.filePath!}
	minutesRead={minutesRead}
>
	<Prose>
		{
			project.data.hasContent === false ?
				<>
					{remoteReadmeUrls.length > 0 ?
						<RemoteReadme urls={remoteReadmeUrls} />
					:	<div class='text-gray-500 dark:text-gray-400 italic text-center py-8 bg-gray-50 dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-600'>
							No README.md found for this project.
							<br />
							Please visit the project links above for more information.
						</div>
					}
				</>
			:	<Content />
		}
	</Prose>
</ProjectLayout>
